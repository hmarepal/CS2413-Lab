//225 Implement stack using queues
typedef struct StackNode {
    int data;
    struct StackNode* next;
} StackNode;


typedef struct {
     StackNode* top;
} MyStack;


MyStack* myStackCreate() {
    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));
    stack->top = NULL;
    return stack;
}

void myStackPush(MyStack* obj, int x) {
    StackNode* newNode = (StackNode*)malloc(sizeof(StackNode));
    newNode->data = x;
    newNode->next = obj->top;
    obj->top = newNode;
}

int myStackPop(MyStack* obj) {
    if (obj->top == NULL) {
        return -1; // Stack is empty
    }
    StackNode* temp = obj->top;
    int value = temp->data;
    obj->top = temp->next;
    free(temp);
    return value;
}

int myStackTop(MyStack* obj) {
     if (obj->top == NULL) {
        return -1; // Stack is empty
    }
    return obj->top->data;
}

bool myStackEmpty(MyStack* obj) {
    return obj->top == NULL;
}

void myStackFree(MyStack* obj) {
    while (obj->top != NULL) {
        myStackPop(obj);
    }
    free(obj);
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/
