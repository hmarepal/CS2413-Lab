#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct {
    Node* front;
    Node* rear;
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}

void myQueuePush(MyQueue* obj, int x) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = x;
    newNode->next = NULL;
    
    if (obj->rear == NULL) {
        obj->front = newNode;
        obj->rear = newNode;
    } else {
        obj->rear->next = newNode;
        obj->rear = newNode;
    }
}

int myQueuePop(MyQueue* obj) {
    if (obj->front == NULL) {
        return -1; 
    }
    
    Node* temp = obj->front;
    int data = temp->data;
    
    obj->front = obj->front->next;
    
    if (obj->front == NULL) {
        obj->rear = NULL;
    }
    
    free(temp);
    return data;
}

int myQueuePeek(MyQueue* obj) {
    if (obj->front == NULL) {
        return -1; 
    }
    
    return obj->front->data;
}

bool myQueueEmpty(MyQueue* obj) {
    return obj->front == NULL;
}

void myQueueFree(MyQueue* obj) {
    while (obj->front != NULL) {
        Node* temp = obj->front;
        obj->front = obj->front->next;
        free(temp);
    }
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
